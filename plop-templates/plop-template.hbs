import { createSlice } from '@reduxjs/toolkit';
import config from '../../utils/config';

const get{{pascalCase name}}FetchOptions = ({ {{name}}Text, {{name}}Type }) => ({
	headers: {
		'Content-Type': 'application/json',
	},
	method: 'POST',
	body: JSON.stringify(
		// todo
	),
});

export const initialState = {
	found{{pascalCase name}}: null,
	loading: false,
	error: null,
	selected: null,
};

const {{name}} = createSlice({
	name: '{{name}}',
	initialState,
	reducers: {
		select{{pascalCase name}}(state, action) {
			const { payload } = action || {};
			state.selected = payload;
		},
		fetch{{pascalCase name}}Request(state, { payload }) {
			state.loading = true;
			state.error = null;
			state.found{{pascalCase name}} = null;
		},
		fetch{{pascalCase name}}Success(state, action) {
			const { payload = [] } = action || {};
			state.found{{pascalCase name}} = payload;
			state.loading = false;
			state.error = null;
		},
		fetch{{pascalCase name}}Failure(state, action) {
			state.loading = false;
			state.error = action.payload;
		},
	},
});

const { fetch{{pascalCase name}}Request } = {{name}}.actions;
export const { select{{pascalCase name}}, fetch{{pascalCase name}}Success, fetch{{pascalCase name}}Failure } = {{name}}.actions;

const url = `${config.basePath}/api/{{name}}`;
export const fetch{{pascalCase name}} = (payload) => (dispatch, _unused, fetchMethod) => {
	const {{name}}FetchOptions = get{{pascalCase name}}FetchOptions(payload);
	dispatch(fetch{{pascalCase name}}Request(payload));
	return fetchMethod(url, {{name}}FetchOptions)
		.then((json) => dispatch(fetch{{pascalCase name}}Success(json)))
		.catch((error) => dispatch(fetch{{pascalCase name}}Failure(error)));
};

export default {{name}}.reducer;
